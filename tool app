import 'package:flutter/material.dart';

void main() {
  runApp(UnitConversionApp());
}

class UnitConversionApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Unit Conversion',
      theme: ThemeData(
        primarySwatch: Colors.teal,
      ),
      home: MainScreen(),
      routes: {
        '/distance': (context) => DistanceConversionPage(),
        '/weight': (context) => WeightConversionPage(),
        '/temperature': (context) => TemperatureConversionPage(),
        '/volume': (context) => VolumeConversionPage(),
        '/resistor': (context) => ResistorConversionPage(),
        '/smd_resistor': (context) => SMDResistorConversionPage(),

      },
    );
  }
}

class SMDResistorConversionPage extends StatefulWidget {
  @override
  _SMDResistorConversionPageState createState() => _SMDResistorConversionPageState();
}


class MainScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Unit Conversion'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: <Widget>[
                Expanded(
                  child: Padding(
                    padding: const EdgeInsets.all(8.0),
                    child: ElevatedButton(
                      onPressed: () {
                        Navigator.pushNamed(context, '/distance');
                      },
                      style: ElevatedButton.styleFrom(
                        padding: EdgeInsets.all(20.0),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(10.0),
                        ),
                        primary: Colors.teal,
                      ),
                      child: Text(
                        'Distance Conversion',
                        textAlign: TextAlign.center,
                        style: TextStyle(fontSize: 18.0),
                      ),
                    ),
                  ),
                ),
                Expanded(
                  child: Padding(
                    padding: const EdgeInsets.all(8.0),
                    child: ElevatedButton(
                      onPressed: () {
                        Navigator.pushNamed(context, '/weight');
                      },
                      style: ElevatedButton.styleFrom(
                        padding: EdgeInsets.all(20.0),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(10.0),
                        ),
                        primary: Colors.teal,
                      ),
                      child: Text(
                        'Weight Conversion',
                        textAlign: TextAlign.center,
                        style: TextStyle(fontSize: 18.0),
                      ),
                    ),
                  ),
                ),
              ],
            ),
            SizedBox(height: 20),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: <Widget>[
                Expanded(
                  child: Padding(
                    padding: const EdgeInsets.all(8.0),
                    child: ElevatedButton(
                      onPressed: () {
                        Navigator.pushNamed(context, '/temperature');
                      },
                      style: ElevatedButton.styleFrom(
                        padding: EdgeInsets.all(20.0),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(10.0),
                        ),
                        primary: Colors.teal,
                      ),
                      child: Text(
                        'Temperature Conversion',
                        textAlign: TextAlign.center,
                        style: TextStyle(fontSize: 18.0),
                      ),
                    ),
                  ),
                ),
                Expanded(
                  child: Padding(
                    padding: const EdgeInsets.all(8.0),
                    child: ElevatedButton(
                      onPressed: () {
                        Navigator.pushNamed(context, '/volume');
                      },
                      style: ElevatedButton.styleFrom(
                        padding: EdgeInsets.all(20.0),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(10.0),
                        ),
                        primary: Colors.teal,
                      ),
                      child: Text(
                        'Volume Conversion',
                        textAlign: TextAlign.center,
                        style: TextStyle(fontSize: 18.0),
                      ),
                    ),
                  ),
                ),
              ],
            ),
            // Adding the Resistor Conversion button
            SizedBox(height: 20),
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: <Widget>[
                Expanded(
                  child: Padding(
                    padding: const EdgeInsets.all(8.0),
                    child: ElevatedButton(
                      onPressed: () {
                        Navigator.pushNamed(context, '/resistor');
                      },
                      style: ElevatedButton.styleFrom(
                        padding: EdgeInsets.all(20.0),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(10.0),
                        ),
                        primary: Colors.teal,
                      ),
                      child: Text(
                        'Resistor Conversion',
                        textAlign: TextAlign.center,
                        style: TextStyle(fontSize: 18.0),
                      ),
                    ),
                  ),
                ),
                Expanded(
                  child: Padding(
                    padding: const EdgeInsets.all(8.0),
                    child: ElevatedButton(
                      onPressed: () {
                        Navigator.pushNamed(context, '/smd_resistor');
                      },
                      style: ElevatedButton.styleFrom(
                        padding: EdgeInsets.all(20.0),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(10.0),
                        ),
                        primary: Colors.teal,
                      ),
                      child: Text(
                        'SMD Resistor Conversion',
                        textAlign: TextAlign.center,
                        style: TextStyle(fontSize: 18.0),
                      ),
                    ),
                  ),
                ),

              ],
            ),
          ],
        ),
      ),
    );
  }
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class ResistorConversionPage extends StatefulWidget {
  @override
  _ResistorConversionPageState createState() => _ResistorConversionPageState();
}


class _ResistorConversionPageState extends State<ResistorConversionPage> {
  // Declare the state for the selected bands
  String _selectedBand1 = 'Brown';
  String _selectedBand2 = 'Black';
  String _selectedBand3 = 'Black';
  String _selectedBand4 = 'Brown';

  // Define the available colors for each band
  final List<String> _band1Colors = [
    'Brown',
    'Red',
    'Orange',
    'Yellow',
    'Green',
    'Blue',
    'Violet',
    'Grey',
    'White'
  ];
  final List<String> _band2Colors = [
    'Black',
    'Brown',
    'Red',
    'Orange',
    'Yellow',
    'Green',
    'Blue',
    'Violet',
    'Grey',
    'White'
  ];
  final List<String> _band3Colors = [
    'Black',
    'Brown',
    'Red',
    'Orange',
    'Yellow',
    'Green',
    'Blue',
    'Violet',
    'Grey',
    'White',
    'Gold',
    'Silver'
  ];
  final List<String> _band4Colors = [
    'Brown',
    'Red',
    'Green',
    'Blue',
    'Violet',
    'Grey',
    'Gold',
    'Silver'
  ];

  final Map<String, int> _colorCodeMap = {
    'Black': 0, 'Brown': 1, 'Red': 2, 'Orange': 3, 'Yellow': 4,
    'Green': 5, 'Blue': 6, 'Violet': 7, 'Grey': 8, 'White': 9,
  };
  final Map<String, double> _multiplierMap = {
    'Black': 1, 'Brown': 10, 'Red': 100, 'Orange': 1000, 'Yellow': 10000,
    'Green': 100000, 'Blue': 1000000, 'Violet': 10000000, 'Grey': 100000000,
    'White': 1000000000, 'Gold': 0.1, 'Silver': 0.01,
  };

  final Map<String, LinearGradient> gradientColorMap = {
    'Gold': LinearGradient(
      colors: [Color(0xFFD4AF37), Color(0xFFFFD700)], // Example gold gradient
      begin: Alignment.topLeft,
      end: Alignment.bottomRight,
    ),
    'Silver': LinearGradient(
      colors: [Color(0xFFC0C0C0), Color(0xFFF0F0F0)], // Example silver gradient
      begin: Alignment.topLeft,
      end: Alignment.bottomRight,
    ),
  };

  final Map<String, String> _toleranceMap = {
    'Brown': '±1%',
    'Red': '±2%',
    'Green': '±0.5%',
    'Blue': '±0.25%',
    'Violet': '±0.1%',
    'Grey': '±0.05%',
    'Gold': '±5%',
    'Silver': '±10%',
    'None': '±20%',
  };
  double _resistanceValue = 0.0;
  String _toleranceValue = '±5%';
  final Map<String, Color> _colorSwatchMap = {
    'Black': Colors.black,
    'Brown': Colors.brown,
    'Red': Colors.red,
    'Orange': Colors.orange,
    'Yellow': Colors.yellow,
    'Green': Colors.green,
    'Blue': Colors.blue,
    'Violet': Colors.purple,
    'Grey': Colors.grey,
    'White': Colors.white,
    'Gold': Colors.amber,
    'Silver': Colors.blueGrey,
  };
  // Add a field for each band color that you want to display
  Color _band1Color = Colors.white;
  Color _band2Color = Colors.white;
  Color _band3Color = Colors.white;
  Color _band4Color = Colors.white;
// Add a method to change the band colors
  void _changeBandColor(int band, Color color) {
    setState(() {
      switch (band) {
        case 1:
          _band1Color = color;
          break;
        case 2:
          _band2Color = color;
          break;
        case 3:
          _band3Color = color;
          break;
        case 4:
          _band4Color = color;
          break;
      }
    });
  }
  void _calculateResistance() {
    setState(() {
      int firstDigit = _colorCodeMap[_selectedBand1] ?? 0;
      int secondDigit = _colorCodeMap[_selectedBand2] ?? 0;
      double multiplier = _multiplierMap[_selectedBand3] ?? 1;
      _resistanceValue = (firstDigit * 10 + secondDigit) * multiplier;
      _toleranceValue = _toleranceMap[_selectedBand4] ?? '±20%';
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Resistor Conversion')),
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: <Widget>[
              // Add your resistor image
              // Image.asset('images/resistor.jpg'),
              Image.asset(
                'Images/Resistor.jpg',
                width: 200, // set the width to the desired width in logical pixels
                height: 100, // set the height to the desired height in logical pixels
              ),

              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: <Widget>[
                  // Replace these with your actual color choosing logic
                  ColorIndicator(color: _band1Color),
                  ColorIndicator(color: _band2Color),
                  ColorIndicator(color: _band3Color),
                  ColorIndicator(color: _band4Color),
                ],
              ),
              ColorSelector(
                bandName: 'Band 1',
                selectedColor: _selectedBand1,
                colorsList: _band1Colors,
                colorMap: _colorSwatchMap,
                gradientMap: gradientColorMap,

                onColorTap: (color) {
                  setState(() {
                    _selectedBand1 = color;
                    _band1Color = _colorSwatchMap[color] ?? Colors.white; // Update the band color
                    _calculateResistance();

                  });
                },
              ),

// Band 2 Color Selector
              ColorSelector(
                bandName: 'Band 2',
                selectedColor: _selectedBand2,
                colorsList: _band2Colors,
                colorMap: _colorSwatchMap,
                gradientMap: gradientColorMap,
                onColorTap: (color) {
                  setState(() {
                    _selectedBand2 = color;
                    _band2Color = _colorSwatchMap[color] ?? Colors.white; // Update the band color
                    _calculateResistance();
                  });
                },
              ),

// Band 3 Color Selector
              ColorSelector(
                bandName: 'Band 3',
                selectedColor: _selectedBand3,
                colorsList: _band3Colors,
                colorMap: _colorSwatchMap,
                gradientMap: gradientColorMap,
                onColorTap: (color) {
                  setState(() {
                    _selectedBand3 = color;
                    _band3Color = _colorSwatchMap[color] ?? Colors.white; // Update the band color
                    _calculateResistance();
                  });
                },
              ),
// Band 4 Color Selector
              ColorSelector(
                bandName: 'Band 4',
                selectedColor: _selectedBand4,
                colorsList: _band4Colors,
                colorMap: _colorSwatchMap,
                gradientMap: gradientColorMap,
                onColorTap: (color) {
                  setState(() {
                    _selectedBand4 = color;
                    _band4Color = _colorSwatchMap[color] ?? Colors.white; // Update the band color
                    _calculateResistance();
                  });
                },
              ),
              SizedBox(height: 20),
              // Display the calculated resistance
              Text(
                'Resistance Value: ${_resistanceValue.toStringAsFixed(2)} Ω',
                style: TextStyle(fontSize: 20.0),
              ),
              // Display the tolerance
              Text(
                'Tolerance: $_toleranceValue',
                style: TextStyle(fontSize: 20.0),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
// This widget represents the color indicator under each band.
class ColorIndicator extends StatelessWidget {
  final Color color;

  const ColorIndicator({Key? key, required this.color}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      width: 40,
      height: 40,
      margin: EdgeInsets.all(4),
      decoration: BoxDecoration(
        color: color,
        border: Border.all(color: Colors.black, width: 2), // Add border to make the white color visible
      ),
    );
  }
}
class ColorSelector extends StatelessWidget {
  final String bandName;
  final String selectedColor;
  final List<String> colorsList;
  final Function(String) onColorTap;
  final Map<String, Color> colorMap; // For solid colors
  final Map<String, LinearGradient> gradientMap; // For gradients

  const ColorSelector({
    Key? key,
    required this.bandName,
    required this.selectedColor,
    required this.colorsList,
    required this.onColorTap,
    required this.colorMap,
    this.gradientMap = const {}, // Default to empty if not provided
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          bandName,
          style: TextStyle(fontSize: 18.0, fontWeight: FontWeight.bold),
        ),
        SizedBox(height: 10),
        Wrap(
          children: colorsList.map((colorName) {
            final isGradient = gradientMap.containsKey(colorName);
            return GestureDetector(
              onTap: () => onColorTap(colorName),
              child: Container(
                width: 40,
                height: 40,
                decoration: BoxDecoration(
                  gradient: isGradient ? gradientMap[colorName] : null,
                  color: isGradient ? null : colorMap[colorName],
                  border: Border.all(color: selectedColor == colorName ? Colors.black : Colors.grey, width: 2),
                  borderRadius: BorderRadius.circular(4),
                ),
                child: selectedColor == colorName ? Icon(Icons.check, color: Colors.white) : null,
              ),
            );
          }).toList(),
        ),
      ],
    );
  }
}


class ResistorBand extends StatelessWidget {
  final Color color;
  final VoidCallback onTap;

  const ResistorBand({Key? key, required this.color, required this.onTap})
      : super(key: key);

  @override
  Widget build(BuildContext context) {
    return InkWell(
      onTap: onTap,
      child: Container(
        width: 30,
        height: 100,
        color: color,
        margin: EdgeInsets.symmetric(horizontal: 4),
      ),
    );
  }
}

class _SMDResistorConversionPageState extends State<SMDResistorConversionPage> {
  String markingCode = '';
  String resistorValue = '';

  void calculateResistorValue(String code) {
    // Ensure that the input code is exactly 3 digits long
    if (code.length == 3) {
      // Extract the first two digits
      String firstTwoDigits = code.substring(0, 2);
      // Set the resistor value
      setState(() {
        resistorValue = '$firstTwoDigits ohm';
      });
    } else {
      // If the input code is not 3 digits long, display an error message
      setState(() {
        resistorValue = 'Invalid input. Please enter a 3-digit code.';
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('SMD Resistor Conversion'),
      ),
      body: Padding(
        padding: EdgeInsets.all(20.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: <Widget>[
            Text(
              'Insert the marking code of the SMD resistor (3 digits):',
              style: TextStyle(fontSize: 18.0),
            ),
            TextField(
              onChanged: (value) {
                markingCode = value;
              },
              decoration: InputDecoration(
                labelText: 'Marking Code',
                border: OutlineInputBorder(),
              ),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                calculateResistorValue(markingCode);
              },
              child: Text('Calculate'),
            ),
            SizedBox(height: 20),
            Text(
              'The resistor value can be:',
              style: TextStyle(fontSize: 18.0),
            ),
            SizedBox(height: 10),
            Text(
              resistorValue,
              style: TextStyle(fontSize: 16.0),
            ),
          ],
        ),
      ),
    );
  }
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class DistanceConversionPage extends StatefulWidget {
  @override
  _DistanceConversionPageState createState() => _DistanceConversionPageState();
}

class _DistanceConversionPageState extends State<DistanceConversionPage> {
  double _inputValue = 0.0;
  double _outputValue = 0.0;
  bool _isMeterToFeet = true;

  void _convert() {
    setState(() {
      if (_isMeterToFeet) {
        _outputValue = _inputValue * 3.28084; // 1 meter = 3.28084 feet
      } else {
        _outputValue = _inputValue / 3.28084; // 1 feet = 0.3048 meters
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Distance Conversion'),
      ),
      body: Padding(
        padding: EdgeInsets.all(20.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            TextField(
              decoration: InputDecoration(
                labelText: 'Enter value',
                border: OutlineInputBorder(),
              ),
              keyboardType: TextInputType.number,
              onChanged: (value) {
                setState(() {
                  _inputValue = double.tryParse(value) ?? 0.0;
                });
              },
            ),
            SizedBox(height: 20),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: <Widget>[
                ElevatedButton(
                  onPressed: () {
                    setState(() {
                      _isMeterToFeet = true;
                      _convert();
                    });
                  },
                  style: ElevatedButton.styleFrom(
                    primary: Colors.teal,
                  ),
                  child: Text('Meters to Feet'),
                ),
                ElevatedButton(
                  onPressed: () {
                    setState(() {
                      _isMeterToFeet = false;
                      _convert();
                    });
                  },
                  style: ElevatedButton.styleFrom(
                    primary: Colors.teal,
                  ),
                  child: Text('Feet to Meters'),
                ),
              ],
            ),
            SizedBox(height: 20),
            Text(
              'Result: $_outputValue',
              style: TextStyle(fontSize: 20.0),
            ),
          ],
        ),
      ),
    );
  }
}

class WeightConversionPage extends StatefulWidget {
  @override
  _WeightConversionPageState createState() => _WeightConversionPageState();
}

class _WeightConversionPageState extends State<WeightConversionPage> {
  double _inputValue = 0.0;
  double _outputValue = 0.0;
  bool _isKilogramToPound = true;

  void _convert() {
    setState(() {
      if (_isKilogramToPound) {
        _outputValue = _inputValue * 2.20462; // 1 kilogram = 2.20462 pounds
      } else {
        _outputValue = _inputValue / 2.20462; // 1 pound = 0.453592 kilograms
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Weight Conversion'),
      ),
      body: Padding(
        padding: EdgeInsets.all(20.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            TextField(
              decoration: InputDecoration(
                labelText: 'Enter value',
                border: OutlineInputBorder(),
              ),
              keyboardType: TextInputType.number,
              onChanged: (value) {
                setState(() {
                  _inputValue = double.tryParse(value) ?? 0.0;
                });
              },
            ),
            SizedBox(height: 20),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: <Widget>[
                ElevatedButton(
                  onPressed: () {
                    setState(() {
                      _isKilogramToPound = true;
                      _convert();
                    });
                  },
                  style: ElevatedButton.styleFrom(
                    primary: Colors.teal,
                  ),
                  child: Text('Kilograms to Pounds'),
                ),
                ElevatedButton(
                  onPressed: () {
                    setState(() {
                      _isKilogramToPound = false;
                      _convert();
                    });
                  },
                  style: ElevatedButton.styleFrom(
                    primary: Colors.teal,
                  ),
                  child: Text('Pounds to Kilograms'),
                ),
              ],
            ),
            SizedBox(height: 20),
            Text(
              'Result: $_outputValue',
              style: TextStyle(fontSize: 20.0),
            ),
          ],
        ),
      ),
    );
  }
}

class TemperatureConversionPage extends StatefulWidget {
  @override
  _TemperatureConversionPageState createState() => _TemperatureConversionPageState();
}

class _TemperatureConversionPageState extends State<TemperatureConversionPage> {
  double _inputValue = 0.0;
  double _outputValue = 0.0;
  bool _isCelsiusToFahrenheit = true;

  void _convert() {
    setState(() {
      if (_isCelsiusToFahrenheit) {
        _outputValue = (_inputValue * 9 / 5) + 32; // Celsius to Fahrenheit
      } else {
        _outputValue = (_inputValue - 32) * 5 / 9; // Fahrenheit to Celsius
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Temperature Conversion'),
      ),
      body: Padding(
        padding: EdgeInsets.all(20.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            TextField(
              decoration: InputDecoration(
                labelText: 'Enter value',
                border: OutlineInputBorder(),
              ),
              keyboardType: TextInputType.number,
              onChanged: (value) {
                setState(() {
                  _inputValue = double.tryParse(value) ?? 0.0;
                });
              },
            ),
            SizedBox(height: 20),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: <Widget>[
                ElevatedButton(
                  onPressed: () {
                    setState(() {
                      _isCelsiusToFahrenheit = true;
                      _convert();
                    });
                  },
                  style: ElevatedButton.styleFrom(
                    primary: Colors.teal,
                  ),
                  child: Text('Celsius to Fahrenheit'),
                ),
                ElevatedButton(
                  onPressed: () {
                    setState(() {
                      _isCelsiusToFahrenheit = false;
                      _convert();
                    });
                  },
                  style: ElevatedButton.styleFrom(
                    primary: Colors.teal,
                  ),
                  child: Text('Fahrenheit to Celsius'),
                ),
              ],
            ),
            SizedBox(height: 20),
            Text(
              'Result: $_outputValue',
              style: TextStyle(fontSize: 20.0),
            ),
          ],
        ),
      ),
    );
  }
}

class VolumeConversionPage extends StatefulWidget {
  @override
  _VolumeConversionPageState createState() => _VolumeConversionPageState();
}

class _VolumeConversionPageState extends State<VolumeConversionPage> {
  double _inputValue = 0.0;
  double _outputValue = 0.0;
  bool _isCubicMeterToLiter = true;

  void _convert() {
    setState(() {
      if (_isCubicMeterToLiter) {
        _outputValue = _inputValue * 1000; // 1 m³ = 1000 L
      } else {
        _outputValue = _inputValue / 1000; // 1 L = 0.001 m³
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Volume Conversion'),
      ),
      body: Padding(
        padding: EdgeInsets.all(20.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            TextField(
              decoration: InputDecoration(
                labelText: 'Enter value',
                border: OutlineInputBorder(),
              ),
              keyboardType: TextInputType.number,
              onChanged: (value) {
                setState(() {
                  _inputValue = double.tryParse(value) ?? 0.0;
                });
              },
            ),
            SizedBox(height: 20),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: <Widget>[
                ElevatedButton(
                  onPressed: () {
                    setState(() {
                      _isCubicMeterToLiter = true;
                      _convert();
                    });
                  },
                  style: ElevatedButton.styleFrom(
                    primary: Colors.teal,
                  ),
                  child: Text('Cubic Meter to Liter'),
                ),
                ElevatedButton(
                  onPressed: () {
                    setState(() {
                      _isCubicMeterToLiter = false;
                      _convert();
                    });
                  },
                  style: ElevatedButton.styleFrom(
                    primary: Colors.teal,
                  ),
                  child: Text('Liter to Cubic Meter'),
                ),
              ],
            ),
            SizedBox(height: 20),
            Text(
              'Result: $_outputValue',
              style: TextStyle(fontSize: 20.0),
            ),
          ],
        ),
      ),
    );
  }
}
